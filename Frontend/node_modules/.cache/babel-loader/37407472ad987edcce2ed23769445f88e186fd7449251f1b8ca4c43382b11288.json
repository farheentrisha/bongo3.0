{"ast":null,"code":"import _slicedToArray from\"C:/bongo/Frontend/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";import React,{useState,useCallback,useRef,useEffect}from\"react\";import loadGoogleMapsScript from\"./googleMaps.js\";import Frame from\"./user_profile.js\";import PortalPopup from\"../components/PortalPopup.js\";import{Outlet,useNavigate}from\"react-router-dom\";import Mytrip from\"../components/Mytrip.js\";import Navbar from\"../components/Navbar.js\";import{jsx as _jsx}from\"react/jsx-runtime\";import{Fragment as _Fragment}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";var Dashboard=function Dashboard(){var _useState=useState(false),_useState2=_slicedToArray(_useState,2),isFrameOpen=_useState2[0],setFrameOpen=_useState2[1];var _useState3=useState(false),_useState4=_slicedToArray(_useState3,2),isMytripOpen=_useState4[0],setMytripOpen=_useState4[1];var _useState5=useState(\"\"),_useState6=_slicedToArray(_useState5,2),placesText=_useState6[0],setPlacesText=_useState6[1];var autocompleteInputRef=useRef(null);var navigate=useNavigate();var openFrame=useCallback(function(){setFrameOpen(true);},[]);var closeFrame=useCallback(function(){setFrameOpen(false);},[]);var openMytrip=useCallback(function(){setMytripOpen(true);},[]);var closeMytrip=useCallback(function(){setMytripOpen(false);},[]);var onDashStartATripClick=useCallback(function(){// Please sync \"dashboard\" to the project\n},[]);var onMyPlanClick=useCallback(function(){navigate(\"/my-plan\");},[navigate]);useEffect(function(){loadGoogleMapsScript(function(){if(window.google){// Initialize the Places Autocomplete service with componentRestrictions\nvar autocomplete=new window.google.maps.places.Autocomplete(autocompleteInputRef.current,{componentRestrictions:{country:\"BD\"}// \"BD\" represents Bangladesh\n});autocomplete.addListener(\"place_changed\",function(){var place=autocomplete.getPlace();console.log(place);// You can handle the selected place as needed\n});}});},[]);var handlePlacesTextChange=function handlePlacesTextChange(event){setPlacesText(event.target.value);};return/*#__PURE__*/_jsxs(_Fragment,{children:[/*#__PURE__*/_jsx(Navbar,{}),/*#__PURE__*/_jsx(\"div\",{children:/*#__PURE__*/_jsx(Outlet,{})})]});};export default Dashboard;","map":{"version":3,"names":["React","useState","useCallback","useRef","useEffect","loadGoogleMapsScript","Frame","PortalPopup","Outlet","useNavigate","Mytrip","Navbar","jsx","_jsx","Fragment","_Fragment","jsxs","_jsxs","Dashboard","_useState","_useState2","_slicedToArray","isFrameOpen","setFrameOpen","_useState3","_useState4","isMytripOpen","setMytripOpen","_useState5","_useState6","placesText","setPlacesText","autocompleteInputRef","navigate","openFrame","closeFrame","openMytrip","closeMytrip","onDashStartATripClick","onMyPlanClick","window","google","autocomplete","maps","places","Autocomplete","current","componentRestrictions","country","addListener","place","getPlace","console","log","handlePlacesTextChange","event","target","value","children"],"sources":["C:/bongo/Frontend/src/pages/Dashboardnew.js"],"sourcesContent":["import React, { useState, useCallback, useRef, useEffect } from \"react\";\r\nimport loadGoogleMapsScript from \"./googleMaps.js\";\r\nimport Frame from \"./user_profile.js\";\r\nimport PortalPopup from \"../components/PortalPopup.js\";\r\nimport { Outlet, useNavigate } from \"react-router-dom\";\r\nimport Mytrip from \"../components/Mytrip.js\";\r\nimport Navbar from \"../components/Navbar.js\";\r\n\r\n\r\nconst Dashboard = () => {\r\n    const [isFrameOpen, setFrameOpen] = useState(false);\r\n    const [isMytripOpen, setMytripOpen] = useState(false);\r\n    const [placesText, setPlacesText] = useState(\"\");\r\n    const autocompleteInputRef = useRef(null);\r\n    const navigate = useNavigate();\r\n\r\n\r\n    const openFrame = useCallback(() => {\r\n        setFrameOpen(true);\r\n    }, []);\r\n\r\n    const closeFrame = useCallback(() => {\r\n        setFrameOpen(false);\r\n    }, []);\r\n\r\n    const openMytrip = useCallback(() => {\r\n        setMytripOpen(true);\r\n    }, []);\r\n\r\n    const closeMytrip = useCallback(() => {\r\n        setMytripOpen(false);\r\n    }, []);\r\n\r\n    const onDashStartATripClick = useCallback(() => {\r\n        // Please sync \"dashboard\" to the project\r\n    }, []);\r\n\r\n    const onMyPlanClick = useCallback(() => {\r\n        navigate(\"/my-plan\");\r\n    }, [navigate]);\r\n\r\n    useEffect(() => {\r\n        loadGoogleMapsScript(() => {\r\n            if (window.google) {\r\n                // Initialize the Places Autocomplete service with componentRestrictions\r\n                const autocomplete = new window.google.maps.places.Autocomplete(autocompleteInputRef.current, {\r\n                    componentRestrictions: { country: \"BD\" }, // \"BD\" represents Bangladesh\r\n                });\r\n\r\n                autocomplete.addListener(\"place_changed\", function () {\r\n                    const place = autocomplete.getPlace();\r\n                    console.log(place); // You can handle the selected place as needed\r\n                });\r\n            }\r\n        });\r\n    }, []);\r\n\r\n    const handlePlacesTextChange = (event) => {\r\n        setPlacesText(event.target.value);\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <Navbar />\r\n            <div>\r\n                <Outlet />\r\n            </div>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default Dashboard;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}